import os
import asyncio
import logging
from datetime import datetime, timedelta
from sqlalchemy import and_, or_
from database import SessionLocal, Subscription
from telegram_service import TelegramService
from payment_service import StripeService, PayPalService
from config import VIDEO_PENDING_FILE_ID

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    filename="subscription_checker.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# ---------- –ü–ê–†–ê–ú–ï–¢–†–´ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è) ----------
PENDING_MIN_AGE_HOURS  = int(os.getenv("PENDING_MIN_AGE_HOURS", "3"))   # –∫–æ–≥–¥–∞ ¬´–ø–∏–Ω–∞—Ç—å¬ª pending (—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –∂–¥—ë–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è)
PENDING_COOLDOWN_HOURS = int(os.getenv("PENDING_COOLDOWN_HOURS", "24")) # –∫–∞–∫ —á–∞—Å—Ç–æ –º–æ–∂–Ω–æ –ø–∏–Ω–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ pending
WARN_DAYS_BEFORE       = int(os.getenv("WARN_DAYS_BEFORE", "2"))        # –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å active –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏
SEND_CANCEL_NOTICE     = os.getenv("SEND_CANCEL_NOTICE", "1") == "1"    # —Å–ª–∞—Ç—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ-–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
           
ADMIN_IDS = [s.strip() for s in os.getenv("ADMIN_IDS", "").split(",") if s.strip()]
ADMIN_FALLBACK_ID = int(ADMIN_IDS[0]) if ADMIN_IDS else None
DRY_RUN = os.getenv("DRY_RUN", "0") == "1" 

def _safe_chat_id(tid: int | None) -> int | None:
    """
    –ö–æ–≥–¥–∞ DRY_RUN=1 ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –ë–î –∏ –Ω–µ –¥–µ—Ä–≥–∞–µ–º –ø–ª–∞—Ç—ë–∂–∫–∏.
    –ï—Å–ª–∏ –≤—Å—ë-—Ç–∞–∫–∏ —Ö–æ—Ç–∏–º —É–≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–≤–∂–∏–≤—É—é¬ª, –ø–æ–¥—Å—Ç–∞–≤–∏–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞.
    """
    return ADMIN_FALLBACK_ID if DRY_RUN and ADMIN_FALLBACK_ID else tid
# =========================
# 1) –ü–ò–ù–ê–ï–ú pending
# =========================
async def nudge_pending_subscriptions():
    """
    –ù–∞—Ö–æ–¥–∏–º pending-–ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ¬´—Å—Ç–∞—Ä—ã–µ¬ª –∏ –Ω–µ –ø–∏–Ω–∞–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é + –∫–Ω–æ–ø–∫–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª (Stripe/PayPal).
    """
    db = SessionLocal()
    ts = TelegramService()
    now = datetime.utcnow()
    cutoff_age   = now - timedelta(hours=PENDING_MIN_AGE_HOURS)
    cooldown_ago = now - timedelta(hours=PENDING_COOLDOWN_HOURS)

    try:
        pending = db.query(Subscription).filter(
            and_(
                Subscription.status == "pending",
                Subscription.created_at <= cutoff_age,
                or_(Subscription.last_nudge_at == None, Subscription.last_nudge_at <= cooldown_ago),
                Subscription.telegram_id != None
            )
        ).all()

        logger.info(f"[nudge_pending] candidates: {len(pending)}")

        for sub in pending:
            tid = sub.telegram_id

            stripe_url = None
            paypal_url = None

            if not DRY_RUN:
                # —Å–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã
                try:
                    s = StripeService.create_subscription_session(tid)
                    if s.get("success"):
                        stripe_url = s.get("url")
                except Exception as e:
                    logger.error(f"[nudge_pending] stripe error for {tid}: {e}")

                try:
                    p = PayPalService.create_subscription(tid)
                    if p.get("success"):
                        paypal_url = p.get("approval_url")
                except Exception as e:
                    logger.error(f"[nudge_pending] paypal error for {tid}: {e}")

            # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            buttons = []
            if stripe_url:
                buttons.append([{"text": "üí≥ Paga con Stripe", "url": stripe_url}])
            if paypal_url:
                buttons.append([{"text": "üÖøÔ∏è Paga con PayPal", "url": paypal_url}])
            buttons.append([{"text": "üìû Consulenza", "url": "https://t.me/liudmylazhyltsova"}])
            reply_markup = {"inline_keyboard": buttons}

            caption = (
                "‚ú® <b>Lezione di prova</b>\n\n"
                "Guarda la presentazione e inizia quando vuoi.\n"
                "Scegli il metodo di pagamento qui sotto üëá"
            )

            # –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ (–∏–ª–∏ –ª–æ–≥ –≤ DRY_RUN)
            if DRY_RUN:
                logger.info(f"[nudge_pending][DRY_RUN] would send video to {tid}")
            else:
                chat_id = _safe_chat_id(tid)      # –Ω–∏–∂–µ helper, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å
                try:
                    await ts.send_video(chat_id, VIDEO_PENDING_FILE_ID, caption, reply_markup)
                except Exception as e:
                    logger.error(f"[nudge_pending] send_video failed for {tid}: {e}")

            # –æ—Ç–º–µ—Ç–∏–º —Ñ–∞–∫—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            sub.last_nudge_at = now
            sub.nudges_count = (sub.nudges_count or 0) + 1
            db.add(sub)

        db.commit()

    except Exception as e:
        logger.error(f"[nudge_pending] exception: {e}")
        db.rollback()
    finally:
        db.close()
# =========================
# 2) –ü–†–ï–î–£–ü–†–ï–ñ–î–ê–ï–ú active
# =========================
async def warn_expiring_subscriptions():
    """
    –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö, –∫–æ–≥–¥–∞ –¥–æ –∫–æ–Ω—Ü–∞ –æ—Å—Ç–∞–ª–æ—Å—å <= WARN_DAYS_BEFORE.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π TelegramService.send_subscription_expiry_warning.
    """
    ts = TelegramService()
    db = SessionLocal()
    now = datetime.utcnow()
    warn_until = now + timedelta(days=WARN_DAYS_BEFORE)
    cooldown_ago = now - timedelta(hours=24)  # –æ–¥–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ —Å—É—Ç–∫–∏ –º–∞–∫—Å–∏–º—É–º

    try:
        subs = db.query(Subscription).filter(
            and_(
                Subscription.status == "active",
                Subscription.expires_at != None,
                Subscription.expires_at > now,
                Subscription.expires_at <= warn_until,
                or_(Subscription.last_warned_at == None, Subscription.last_warned_at <= cooldown_ago),
                Subscription.telegram_id != None
            )
        ).all()

        logger.info(f"[warn_expiring] candidates: {len(subs)}")

        for sub in subs:
            days_left = max((sub.expires_at - now).days, 0)
            await ts.send_subscription_expiry_warning(_safe_chat_id(sub.telegram_id), days_left)
            sub.last_warned_at = now
            db.add(sub)

        db.commit()

    except Exception as e:
        logger.error(f"[warn_expiring] exception: {e}")
        db.rollback()
    finally:
        db.close()

# =========================
# 3) –î–ï–ê–ö–¢–ò–í–ò–†–£–ï–ú –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ (—Ç–≤–æ–π –∫–µ–π—Å)
# =========================
async def deactivate_expired_subscriptions():
    """
    –í—ã–∫–ª—é—á–∞–µ–º –¥–æ—Å—Ç—É–ø —Ç–µ–º, —É –∫–æ–≥–æ status=active, –Ω–æ expires_at < now.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—ë–ø–ª–æ–µ –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è.
    """
    db = SessionLocal()
    now = datetime.utcnow()
    ts = TelegramService()

    try:
        logging.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ...")
        expired = db.query(Subscription).filter(
            and_(
                Subscription.status == "active",
                Subscription.expires_at != None,
                Subscription.expires_at < now
            )
        ).all()

        if not expired:
            logging.info("–ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return
        # 1) –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
        for sub in expired:
            logging.info(f"–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ ID {sub.id} (user {sub.telegram_id})")
            sub.status = "expired"
            sub.has_group_access = False
            sub.cancelled_at = now
            db.add(sub)

        db.commit()

        # 2) –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞ ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for sub in expired:
            tid = _safe_chat_id(sub.telegram_id)
            stripe_url = paypal_url = None
            if not DRY_RUN:
            # –ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ ¬´–≤–æ–∑–≤—Ä–∞—Ç¬ª (–µ—Å–ª–∏ –æ—Ç–≤–∞–ª–∏—Ç—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫—É)
                try:
                    s = StripeService.create_subscription_session(sub.telegram_id)
                    if s.get("success"):
                        stripe_url = s.get("url")
                except Exception as e:
                    logging.error(f"[goodbye] stripe error for {sub.telegram_id}: {e}")

                try:
                    p = PayPalService.create_subscription(sub.telegram_id)
                    if p.get("success"):
                        paypal_url = p.get("approval_url")
                except Exception as e:
                    logging.error(f"[goodbye] paypal error for {sub.telegram_id}: {e}")

                try:
                    await ts.send_subscription_expired_goodbye(_safe_chat_id(sub.telegram_id), stripe_url, paypal_url)
                except Exception as e:
                    logging.error(f"[goodbye] send failed for {sub.telegram_id}: {e}")

            logging.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ. –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {len(expired)}")

    except Exception as e:
        logging.error(f"[deactivate_expired_subscriptions] exception: {e}")
        db.rollback()
    finally:
        db.close()

# =========================
# –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
# =========================
async def run_all_jobs():
    start = datetime.utcnow()
    nudged = await nudge_pending_subscriptions()
    warned = await warn_expiring_subscriptions()
    expired = await deactivate_expired_subscriptions()
    # –û—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É 
    summary = (f"‚úÖ Cron finished\n"
               f"- nudged pending: {nudged}\n"
               f"- warned active: {warned}\n"
               f"- deactivated expired: {expired}\n"
               f"took: {(datetime.utcnow()-start).total_seconds():.1f}s")
    if ADMIN_FALLBACK_ID:
        await TelegramService().send_message(ADMIN_FALLBACK_ID, summary)

def run_all_sync():
    asyncio.run(run_all_jobs())

if __name__ == "__main__":
    run_all_sync()
