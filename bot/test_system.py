"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫
"""
import os
import sys
import sqlite3
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_database_setup():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database import create_tables, get_db, create_user, get_user_by_telegram_id
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        create_tables()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db = next(get_db())
        try:
            test_user = create_user(db, 123456789, "testuser", "Test", "User")
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID={test_user.id}, Telegram ID={test_user.telegram_id}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            retrieved_user = get_user_by_telegram_id(db, 123456789)
            if retrieved_user:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {retrieved_user.first_name} {retrieved_user.last_name}")
            else:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ë–î: {str(e)}")
        return False
    
    return True

def test_payment_config():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º...")
    
    try:
        from payment_config import (
            PAYPAL_CLIENT_ID, PAYPAL_CLIENT_SECRET, STRIPE_SECRET_KEY,
            SUBSCRIPTION_PRICE, CLOSED_GROUP_LINK
        )
        
        print(f"‚úÖ PayPal Client ID: {PAYPAL_CLIENT_ID[:10]}...")
        print(f"‚úÖ PayPal Client Secret: {PAYPAL_CLIENT_SECRET[:10]}...")
        print(f"‚úÖ Stripe Secret Key: {STRIPE_SECRET_KEY[:10]}...")
        print(f"‚úÖ Subscription Price: {SUBSCRIPTION_PRICE} EUR")
        print(f"‚úÖ Closed Group Link: {CLOSED_GROUP_LINK}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
        return False
    
    return True

def test_payment_services():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º...")
    
    try:
        from payment_service import StripeService, PayPalService
        
        print("‚úÖ StripeService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print("‚úÖ PayPalService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ Stripe (–±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–π, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
        print("‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Stripe (–æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏):")
        stripe_result = StripeService.create_subscription_session(123456789)
        if not stripe_result['success']:
            print(f"‚ö†Ô∏è  –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ Stripe: {stripe_result['error']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ PayPal
        print("‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PayPal (–æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏):")
        paypal_result = PayPalService.create_subscription(123456789)
        if not paypal_result['success']:
            print(f"‚ö†Ô∏è  –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ PayPal: {paypal_result['error']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {str(e)}")
        return False
    
    return True

def test_subscription_workflow():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ workflow –ø–æ–¥–ø–∏—Å–∫–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow –ø–æ–¥–ø–∏—Å–∫–∏...")
    
    try:
        from database import (
            get_db, create_subscription, activate_subscription, 
            cancel_subscription, get_active_subscription
        )
        
        db = next(get_db())
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription = create_subscription(
                db, 123456789, "stripe", "test_session_123", 10.0, "test_customer_123"
            )
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID={subscription.id}, Status={subscription.status}")
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            activated = activate_subscription(db, "test_session_123")
            if activated:
                print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: Status={activated.status}, Expires={activated.expires_at}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            active_sub = get_active_subscription(db, 123456789)
            if active_sub:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: ID={active_sub.id}")
            
            # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            cancelled = cancel_subscription(db, "test_session_123")
            if cancelled:
                print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: Status={cancelled.status}")
                
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ workflow: {str(e)}")
        return False
    
    return True

def test_telegram_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        from telegram_service import TelegramService
        
        telegram_service = TelegramService()
        print("‚úÖ TelegramService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"‚úÖ API URL: {telegram_service.api_url[:50]}...")
        
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Telegram API –Ω–µ –¥–µ–ª–∞–µ–º –≤ —Ç–µ—Å—Ç–∞—Ö
        print("‚ö†Ô∏è  –†–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Telegram API –≤ —Ç–µ—Å—Ç–∞—Ö –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram —Å–µ—Ä–≤–∏—Å–∞: {str(e)}")
        return False
    
    return True

def test_webhook_server():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        from bot.webhook import app
        
        print("‚úÖ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        routes = [rule.rule for rule in app.url_map.iter_rules()]
        expected_routes = ['/webhook/stripe', '/webhook/paypal', '/health']
        
        for route in expected_routes:
            if route in routes:
                print(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç {route} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå –ú–∞—Ä—à—Ä—É—Ç {route} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ webhook —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        return False
    
    return True

def check_file_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'config.py',
        'payment_config.py',
        'database.py',
        'payment_service.py',
        'telegram_service.py',
        'webhook.py',
        'main.py'
    ]
    
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file} –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå {file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫\n")
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", check_file_structure),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database_setup),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", test_payment_config),
        ("–°–µ—Ä–≤–∏—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π", test_payment_services),
        ("Workflow –ø–æ–¥–ø–∏—Å–∫–∏", test_subscription_workflow),
        ("Telegram —Å–µ—Ä–≤–∏—Å", test_telegram_service),
        ("Webhook —Å–µ—Ä–≤–µ—Ä", test_webhook_server),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"–¢–µ—Å—Ç: {test_name}")
        print('='*50)
        
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {str(e)}")
    
    print(f"\n{'='*50}")
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print('='*50)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)