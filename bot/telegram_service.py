import asyncio
import aiohttp
from datetime import datetime, timedelta
from database import SessionLocal, Subscription
from sqlalchemy import and_
from config import BOT_TOKEN
from payment_config import CLOSED_GROUP_LINK
import logging

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

class TelegramService:
    def __init__(self):
        self.bot_token = BOT_TOKEN
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"

    async def send_message(self, chat_id: int, text: str, reply_markup=None, parse_mode="HTML"):
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    'chat_id': chat_id,
                    'text': text,
                    'parse_mode': parse_mode
                }
                if reply_markup:
                    data['reply_markup'] = reply_markup
                async with session.post(f"{self.api_url}/sendMessage", json=data) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        resp_text = await response.text()  # —á–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
                        logger.error(f"Error sending message: {response.status} ‚Äî {resp_text}")
                        return None
        except Exception as e:
            logger.error(f"Error in send_message: {str(e)}")
            return None

    async def send_payment_success_notification(self, telegram_id: int, subscription):
        try:
            # –ñ—ë—Å—Ç–∫–∞—è –∑–∞—â–∏—Ç–∞: –Ω–µ —à–ª—ë–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ active
            if not subscription or getattr(subscription, "status", None) != "active":
                logger.warning(f"Skip success notification: subscription not active "
                               f"(id={getattr(subscription, 'id', None)}, status={getattr(subscription, 'status', None)})")
                # –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å—Å—ã–ª–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                await self.send_message(
                    telegram_id,
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è."
                )
                return
            text = (
                "üéâ <b>Congratulazioni! Il pagamento √® andato a buon fine!</b>\n\n"
                f"Il tuo abbonamento √® attivo fino al: {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"Importo: {subscription.amount} {subscription.currency}\n\n"
                "Ora puoi accedere al gruppo chiuso con i corsi!"
            )
            reply_markup = {
                "inline_keyboard": [[
                    {
                        "text": "‚û°Ô∏è Accedi al gruppo chiuso Expert Lash",
                        "url": CLOSED_GROUP_LINK
                    }
                ]]
            }
            await self.send_message(telegram_id, text, reply_markup)
        except Exception as e:
            logger.error(f"Error sending payment success notification: {str(e)}")

    async def send_subscription_cancelled_notification(self, telegram_id: int):
        try:
            text = (
                "‚ùå <b>Il tuo abbonamento √® stato annullato</b>\n\n"
                "L‚Äôaccesso al gruppo chiuso con i corsi √® stato revocato.\n\n"
                "Se desideri riattivare l‚Äôabbonamento, usa il comando /start"
            )
            await self.send_message(telegram_id, text)
        except Exception as e:
            logger.error(f"Error sending subscription cancelled notification: {str(e)}")

    async def send_subscription_renewed_notification(self, telegram_id: int, subscription):
        try:
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ —Å—Ç–∞—Ç—É—Å –Ω–µ active
            if not subscription or getattr(subscription, "status", None) != "active":
                logger.warning(f"Skip renewed notification: subscription not active "
                               f"(id={getattr(subscription, 'id', None)}, status={getattr(subscription, 'status', None)})")
                await self.send_message(
                    telegram_id,
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∞. –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è."
                )
                return
            
            text = (
                "‚úÖ <b>Abbonamento rinnovato con successo!</b>\n\n"
                f"Il tuo abbonamento √® stato esteso fino al: {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"Importo addebitato: {subscription.amount} {subscription.currency}\n\n"
                "L‚Äôaccesso al gruppo chiuso con i corsi √® stato mantenuto!"
            )
            reply_markup = {
                "inline_keyboard": [[
                    {
                        "text": "‚û°Ô∏è Accedi al gruppo chiuso Expert Lash",
                        "url": CLOSED_GROUP_LINK
                    }
                ]]
            }
            await self.send_message(telegram_id, text, reply_markup)
        except Exception as e:
            logger.error(f"Error sending subscription renewed notification: {str(e)}")

    async def send_payment_failed_notification(self, telegram_id: int):
        try:
            text = (
                "‚ö†Ô∏è <b>Problema con il pagamento dell‚Äôabbonamento</b>\n\n"
                "Non √® stato possibile effettuare l‚Äôaddebito per il rinnovo dell‚Äôabbonamento.\n"
                "Per favore, controlla i dati della tua carta o aggiorna il metodo di pagamento.\n\n"
                "Se il problema non verr√† risolto, l‚Äôaccesso ai corsi potrebbe essere sospeso."
            )
            reply_markup = {
                "inline_keyboard": [
                    [{
                        "text": "üí≥ Aggiorna il metodo di pagamento",
                        "callback_data": "update_payment_method"
                    }],
                    [{
                        "text": "üìû Contatta il supporto",
                        "url": "https://t.me/liudmylazhyltsova"
                    }]
                ]
            }
            await self.send_message(telegram_id, text, reply_markup)
        except Exception as e:
            logger.error(f"Error sending payment failed notification: {str(e)}")

    async def get_chat_member(self, chat_id: str, user_id: int):
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    'chat_id': chat_id,
                    'user_id': user_id
                }
                async with session.post(f"{self.api_url}/getChatMember", json=data) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"Error getting chat member: {response.status}")
                        return None
        except Exception as e:
            logger.error(f"Error in get_chat_member: {str(e)}")
            return None

    async def kick_chat_member(self, chat_id: str, user_id: int):
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    'chat_id': chat_id,
                    'user_id': user_id
                }
                async with session.post(f"{self.api_url}/kickChatMember", json=data) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"Error kicking chat member: {response.status}")
                        return None
        except Exception as e:
            logger.error(f"Error in kick_chat_member: {str(e)}")
            return None

    async def unban_chat_member(self, chat_id: str, user_id: int):
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    'chat_id': chat_id,
                    'user_id': user_id,
                    'only_if_banned': True
                }
                async with session.post(f"{self.api_url}/unbanChatMember", json=data) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"Error unbanning chat member: {response.status}")
                        return None
        except Exception as e:
            logger.error(f"Error in unban_chat_member: {str(e)}")
            return None

    async def send_subscription_expiry_warning(self, telegram_id: int, days_left: int):
        try:
            text = (
                f"‚è∞ <b>Il tuo abbonamento scade tra {days_left} giorni.</b>\n\n"
                "Per non perdere l'accesso ai corsi, assicurati che il pagamento automatico sia attivo.\n\n"
                "Se hai domande, contatta il supporto."
            )
            reply_markup = {
                "inline_keyboard": [
                    [{
                        "text": "üí≥ Aggiorna il metodo di pagamento",
                        "callback_data": "update_payment_method"
                    }],
                    [{
                        "text": "üìû Contatta il supporto",
                        "url": "https://t.me/liudmylazhyltsova"
                    }]
                ]
            }
            await self.send_message(telegram_id, text, reply_markup)
        except Exception as e:
            logger.error(f"Error sending subscription expiry warning: {str(e)}")

async def manage_group_access():
    telegram_service = TelegramService()
    db = None
    try:
        db = SessionLocal()
        expired_subs = db.query(Subscription).filter(
            and_(
                Subscription.expires_at < datetime.utcnow(),
                Subscription.has_group_access == True,
                Subscription.status == "active"
            )
        ).all()

        for sub in expired_subs:
            sub.has_group_access = False
            sub.status = "expired"
            db.add(sub)
            await telegram_service.send_subscription_cancelled_notification(sub.telegram_id)

        db.commit()
        logger.info(f"Processed {len(expired_subs)} expired subscriptions")
    except Exception as e:
        logger.error(f"Error in manage_group_access: {str(e)}")
        if db:
            db.rollback()
    finally:
        if db:
            db.close()

async def manage_group_access_loop(interval_seconds=3600):
    while True:
        await manage_group_access()
        await asyncio.sleep(interval_seconds)

async def send_expiry_warnings():
    from database import SessionLocal, Subscription
    from sqlalchemy import and_

    telegram_service = TelegramService()
    db = None
    try:
        db = SessionLocal()
        warning_date = datetime.utcnow() + timedelta(days=3)
        subs_to_warn = db.query(Subscription).filter(
            and_(
                Subscription.expires_at <= warning_date,
                Subscription.expires_at > datetime.utcnow(),
                Subscription.status == "active",
                Subscription.has_group_access == True
            )
        ).all()

        for sub in subs_to_warn:
            days_left = (sub.expires_at - datetime.utcnow()).days
            await telegram_service.send_subscription_expiry_warning(sub.telegram_id, days_left)

        logger.info(f"Sent expiry warnings to {len(subs_to_warn)} users")
    except Exception as e:
        logger.error(f"Error in send_expiry_warnings: {str(e)}")
    finally:
        if db:
            db.close()

# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –∫—Ä–æ–Ω–∞)
def run_manage_group_access():
    asyncio.run(manage_group_access())

def run_send_expiry_warnings():
    asyncio.run(send_expiry_warnings())
