import asyncio
import aiohttp
from datetime import datetime
from config import BOT_TOKEN
from payment_config import CLOSED_GROUP_LINK

class TelegramService:
    def __init__(self):
        self.bot_token = BOT_TOKEN
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    async def send_message(self, chat_id: int, text: str, reply_markup=None, parse_mode="HTML"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API"""
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    'chat_id': chat_id,
                    'text': text,
                    'parse_mode': parse_mode
                }
                
                if reply_markup:
                    data['reply_markup'] = reply_markup
                
                async with session.post(f"{self.api_url}/sendMessage", json=data) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        print(f"Error sending message: {response.status}")
                        return None
        except Exception as e:
            print(f"Error in send_message: {str(e)}")
            return None
    
    async def send_payment_success_notification(self, telegram_id: int, subscription):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
        try:
            text = (
                "üéâ <b>Congratulazioni! Il pagamento √® andato a buon fine!</b>\n\n"  # üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n
                f"Il tuo abbonamento √® attivo fino al: {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}\n"  # –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ: ...
                f"Importo: {subscription.amount} {subscription.currency}\n\n"  # –°—É–º–º–∞: ...
                "Ora puoi accedere al gruppo chiuso con i corsi!"  # –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É —Å –∫—É—Ä—Å–∞–º–∏!
            )
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É
            reply_markup = {
                "inline_keyboard": [[
                    {
                        "text": "‚û°Ô∏è Accedi al gruppo chiuso Expert Lash", # –ü–µ—Ä–µ–π—Ç–∏ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É Expert Lash
                        "url": CLOSED_GROUP_LINK
                    }
                ]]
            }
            
            await self.send_message(telegram_id, text, reply_markup)
            
        except Exception as e:
            print(f"Error sending payment success notification: {str(e)}")
    
    async def send_subscription_cancelled_notification(self, telegram_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            text = (
                "‚ùå <b>Il tuo abbonamento √® stato annullato</b>\n\n" # –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.
                "L‚Äôaccesso al gruppo chiuso con i corsi √® stato revocato.\n\n" #–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ —Å –∫—É—Ä—Å–∞–º–∏ –ø—Ä–µ–∫—Ä–∞—â—ë–Ω.
                "Se desideri riattivare l‚Äôabbonamento, usa il comando /start" # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.
            )
            
            await self.send_message(telegram_id, text)
            
        except Exception as e:
            print(f"Error sending subscription cancelled notification: {str(e)}")
    
    async def send_subscription_renewed_notification(self, telegram_id: int, subscription):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–∞–≤—Ç–æ—á–∞—Ä–¥–∂)"""
        try:
            text = (
                
                "‚úÖ <b>Abbonamento rinnovato con successo!</b>\n\n" # –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!
                f"Il tuo abbonamento √® stato esteso fino al: {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}\n" #–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ:
                f"Importo addebitato: {subscription.amount} {subscription.currency}\n\n" #–°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è:
                "L‚Äôaccesso al gruppo chiuso con i corsi √® stato mantenuto!" # –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ —Å –∫—É—Ä—Å–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!
            )
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É
            reply_markup = {
                "inline_keyboard": [[
                    {
                        "text": "‚û°Ô∏è Accedi al gruppo chiuso Expert Lash", # –ü–µ—Ä–µ–π—Ç–∏ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É Expert Lash
                        "url": CLOSED_GROUP_LINK
                    }
                ]]
            }
            
            await self.send_message(telegram_id, text, reply_markup)
            
        except Exception as e:
            print(f"Error sending subscription renewed notification: {str(e)}")
    
    async def send_payment_failed_notification(self, telegram_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
        try:
            text = (
                "‚ö†Ô∏è <b>Problema con il pagamento dell‚Äôabbonamento</b>\n\n"  # ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                "Non √® stato possibile effettuare l‚Äôaddebito per il rinnovo dell‚Äôabbonamento.\n"  # –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
                "Per favore, controlla i dati della tua carta o aggiorna il metodo di pagamento.\n\n"  # –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—Ä—Ç—É –∏–ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                "Se il problema non verr√† risolto, l‚Äôaccesso ai corsi potrebbe essere sospeso."  # –ï—Å–ª–∏ –Ω–µ —Ä–µ—à–∏—Ç—å, –¥–æ—Å—Ç—É–ø –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            )
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
            reply_markup = {
                "inline_keyboard": [
                    [{
                        "text": "üí≥ Aggiorna il metodo di pagamento",  # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                        "callback_data": "update_payment_method"
                    }],
                    [{
                        "text": "üìû Contatta il supporto",  # –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
                        "url": "https://t.me/liudmylazhyltsova"
                    }]
                ]
            }
            
            await self.send_message(telegram_id, text, reply_markup)
            
        except Exception as e:
            print(f"Error sending payment failed notification: {str(e)}")
    
    async def get_chat_member(self, chat_id: str, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ —á–∞—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    'chat_id': chat_id,
                    'user_id': user_id
                }
                
                async with session.post(f"{self.api_url}/getChatMember", json=data) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        return None
        except Exception as e:
            print(f"Error in get_chat_member: {str(e)}")
            return None
    
    async def kick_chat_member(self, chat_id: str, user_id: int):
        """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —á–∞—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    'chat_id': chat_id,
                    'user_id': user_id
                }
                
                async with session.post(f"{self.api_url}/kickChatMember", json=data) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        print(f"Error kicking chat member: {response.status}")
                        return None
        except Exception as e:
            print(f"Error in kick_chat_member: {str(e)}")
            return None
    
    async def unban_chat_member(self, chat_id: str, user_id: int):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞ (–ø–æ–∑–≤–æ–ª—è–µ—Ç –µ–º—É —Å–Ω–æ–≤–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è)"""
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    'chat_id': chat_id,
                    'user_id': user_id,
                    'only_if_banned': True
                }
                
                async with session.post(f"{self.api_url}/unbanChatMember", json=data) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        print(f"Error unbanning chat member: {response.status}")
                        return None
        except Exception as e:
            print(f"Error in unban_chat_member: {str(e)}")
            return None
    
    async def send_subscription_expiry_warning(self, telegram_id: int, days_left: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            text = (
                f"‚è∞ <b>Il tuo abbonamento scade tra {days_left} giorni.</b>\n\n"  # ‚è∞ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω.</b>
                "Per non perdere l'accesso ai corsi, assicurati che il pagamento automatico sia attivo.\n\n"  # –ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å–∞–º, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂.
                "Se hai domande, contatta il supporto."  # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
            )
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
            reply_markup = {
                "inline_keyboard": [
                    [{
                        "text": "üí≥ Aggiorna il metodo di pagamento",  # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                        "callback_data": "update_payment_method"
                    }],
                    [{
                        "text": "üìû Contatta il supporto",  # –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
                        "url": "https://t.me/liudmylazhyltsova"
                    }]
                ]
            }
            
            await self.send_message(telegram_id, text, reply_markup)
            
        except Exception as e:
            print(f"Error sending subscription expiry warning: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –≥—Ä—É–ø–ø–µ
async def manage_group_access():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –≥—Ä—É–ø–ø–µ.
    –î–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∫ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ cron –∏–ª–∏ celery).
    """
    from database import get_db, SessionLocal
    from sqlalchemy import and_
    from database import Subscription
    
    telegram_service = TelegramService()
    
    try:
        db = SessionLocal()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–ª–∏, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –µ—â–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ
        expired_subscriptions = db.query(Subscription).filter(
            and_(
                Subscription.expires_at < datetime.utcnow(),
                Subscription.has_group_access == True,
                Subscription.status == "active"
            )
        ).all()
        
        for subscription in expired_subscriptions:
            # –£–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ
            subscription.has_group_access = False
            subscription.status = "expired"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await telegram_service.send_subscription_cancelled_notification(
                subscription.telegram_id
            )
            
            # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å ID –≥—Ä—É–ø–ø—ã, –º–æ–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # await telegram_service.kick_chat_member(GROUP_CHAT_ID, subscription.telegram_id)
        
        db.commit()
        print(f"Processed {len(expired_subscriptions)} expired subscriptions")
        
    except Exception as e:
        print(f"Error in manage_group_access: {str(e)}")
        db.rollback()
    finally:
        db.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def send_expiry_warnings():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
    –î–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.
    """
    from database import get_db, SessionLocal
    from sqlalchemy import and_
    from database import Subscription
    from datetime import timedelta
    
    telegram_service = TelegramService()
    
    try:
        db = SessionLocal()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è
        warning_date = datetime.utcnow() + timedelta(days=3)
        
        subscriptions_to_warn = db.query(Subscription).filter(
            and_(
                Subscription.expires_at <= warning_date,
                Subscription.expires_at > datetime.utcnow(),
                Subscription.status == "active",
                Subscription.has_group_access == True
            )
        ).all()
        
        for subscription in subscriptions_to_warn:
            days_left = (subscription.expires_at - datetime.utcnow()).days
            await telegram_service.send_subscription_expiry_warning(
                subscription.telegram_id, days_left
            )
        
        print(f"Sent expiry warnings to {len(subscriptions_to_warn)} users")
        
    except Exception as e:
        print(f"Error in send_expiry_warnings: {str(e)}")
    finally:
        db.close()
