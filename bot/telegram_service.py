import os
import asyncio
import aiohttp
from datetime import datetime, timedelta
from database import SessionLocal, Subscription
from sqlalchemy import and_
from config import BOT_TOKEN as CONF_BOT_TOKEN
from payment_config import CLOSED_GROUP_LINK
import logging

logger = logging.getLogger(__name__)

class TelegramService:
    def __init__(self):
        self.bot_token = os.getenv("BOT_TOKEN", CONF_BOT_TOKEN)
        if not self.bot_token:
            raise RuntimeError("BOT_TOKEN not set")
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"

    # ---- low-level helper ----
    async def _post(self, method: str, json: dict):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.api_url}/{method}", json=json) as resp:
                    if resp.status == 200:
                        return await resp.json()
                    text = await resp.text()
                    logger.error(f"Telegram API error [{method}]: {resp.status} ‚Äî {text}")
                    return None
        except Exception as e:
            logger.error(f"Telegram API exception [{method}]: {e}")
            return None

    # ---- messaging ----
    async def send_message(self, chat_id: int, text: str, reply_markup=None, parse_mode="HTML"):
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": parse_mode
        }
        if reply_markup:
            payload["reply_markup"] = reply_markup
        return await self._post("sendMessage", payload)

    async def send_payment_success_notification(self, telegram_id: int, subscription):
        try:
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
            if not subscription or getattr(subscription, "status", None) != "active":
                logger.warning(
                    "Skip success notification: subscription not active "
                    f"(id={getattr(subscription, 'id', None)}, status={getattr(subscription, 'status', None)})"
                )
                await self.send_message(
                    telegram_id,
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è."
                )
                return

            text = (
                "üéâ <b>Congratulazioni! Il pagamento √® andato a buon fine!</b>\n\n"
                f"Il tuo abbonamento √® attivo fino al: {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"Importo: {subscription.amount} {subscription.currency}\n\n"
                "Ora puoi accedere al gruppo chiuso con i corsi!"
            )
            reply_markup = {
                "inline_keyboard": [[
                    {"text": "‚û°Ô∏è Accedi al gruppo chiuso Expert Lash", "url": CLOSED_GROUP_LINK}
                ]]
            }
            await self.send_message(telegram_id, text, reply_markup)
        except Exception as e:
            logger.error(f"Error sending payment success notification: {e}")

    async def send_subscription_cancelled_notification(self, telegram_id: int):
        try:
            text = (
                "‚ùå <b>Il tuo abbonamento √® stato annullato</b>\n\n"
                "L‚Äôaccesso al gruppo chiuso con i corsi √® stato revocato.\n\n"
                "Se desideri riattivare l‚Äôabbonamento, usa il comando /start"
            )
            await self.send_message(telegram_id, text)
        except Exception as e:
            logger.error(f"Error sending subscription cancelled notification: {e}")

    async def send_subscription_renewed_notification(self, telegram_id: int, subscription):
        try:
            if not subscription or getattr(subscription, "status", None) != "active":
                logger.warning(
                    "Skip renewed notification: subscription not active "
                    f"(id={getattr(subscription, 'id', None)}, status={getattr(subscription, 'status', None)})"
                )
                await self.send_message(
                    telegram_id,
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∞. –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è."
                )
                return

            text = (
                "‚úÖ <b>Abbonamento rinnovato con successo!</b>\n\n"
                f"Il tuo abbonamento √® stato esteso fino al: {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"Importo addebitato: {subscription.amount} {subscription.currency}\n\n"
                "L‚Äôaccesso al gruppo chiuso con i corsi √® stato mantenuto!"
            )
            reply_markup = {
                "inline_keyboard": [[
                    {"text": "‚û°Ô∏è Accedi al gruppo chiuso Expert Lash", "url": CLOSED_GROUP_LINK}
                ]]
            }
            await self.send_message(telegram_id, text, reply_markup)
        except Exception as e:
            logger.error(f"Error sending subscription renewed notification: {e}")

    async def send_payment_failed_notification(self, telegram_id: int):
        try:
            text = (
                "‚ö†Ô∏è <b>Problema con il pagamento dell‚Äôabbonamento</b>\n\n"
                "Non √® stato possibile effettuare l‚Äôaddebito per il rinnovo dell‚Äôabbonamento.\n"
                "Per favore, controlla i dati della tua carta o aggiorna il metodo di pagamento.\n\n"
                "Se il problema non verr√† risolto, l‚Äôaccesso ai corsi potrebbe essere sospeso."
            )
            reply_markup = {
                "inline_keyboard": [
                    [{"text": "üí≥ Aggiorna il metodo di pagamento", "callback_data": "update_payment_method"}],
                    [{"text": "üìû Contatta il supporto", "url": "https://t.me/liudmylazhyltsova"}]
                ]
            }
            await self.send_message(telegram_id, text, reply_markup)
        except Exception as e:
            logger.error(f"Error sending payment failed notification: {e}")

    # ---- membership helpers (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ) ----
    async def get_chat_member(self, chat_id: str, user_id: int):
        payload = {"chat_id": chat_id, "user_id": user_id}
        return await self._post("getChatMember", payload)

    async def ban_chat_member(self, chat_id: str, user_id: int):
        """
        –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ kickChatMember. –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ.
        """
        payload = {"chat_id": chat_id, "user_id": user_id}
        res = await self._post("banChatMember", payload)
        if not res:
            # —Ñ–æ–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–æ–∫—Å–∏/APIs —Å—Ç–∞—Ä—ã–µ
            res = await self._post("kickChatMember", payload)
        return res

    async def unban_chat_member(self, chat_id: str, user_id: int):
        payload = {"chat_id": chat_id, "user_id": user_id, "only_if_banned": True}
        return await self._post("unbanChatMember", payload)

    async def send_subscription_expiry_warning(self, telegram_id: int, days_left: int):
        try:
            text = (
                f"‚è∞ <b>Il tuo abbonamento scade tra {days_left} giorni.</b>\n\n"
                "Per non perdere l'accesso ai corsi, assicurati che il pagamento automatico sia attivo.\n\n"
                "Se hai domande, contatta il supporto."
            )
            reply_markup = {
                "inline_keyboard": [
                    [{"text": "üí≥ Aggiorna il metodo di pagamento", "callback_data": "update_payment_method"}],
                    [{"text": "üìû Contatta il supporto", "url": "https://t.me/liudmylazhyltsova"}]
                ]
            }
            await self.send_message(telegram_id, text, reply_markup)
        except Exception as e:
            logger.error(f"Error sending subscription expiry warning: {e}")
    
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –ø–æ –Ω–µ–∑–∞–∫–æ–Ω—á–∏–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞
    async def send_video(self, chat_id: int, file_id: str, caption: str,
                         reply_markup=None, parse_mode="HTML"):
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    "chat_id": chat_id,
                    "video": file_id,     # file_id –∏–∑ Telegram
                    "caption": caption,
                    "parse_mode": parse_mode
                }
                if reply_markup:
                    data["reply_markup"] = reply_markup
                async with session.post(f"{self.api_url}/sendVideo", json=data) as resp:
                    if resp.status == 200:
                        return await resp.json()
                    else:
                        txt = await resp.text()
                        logger.error(f"Error send_video: {resp.status} ‚Äî {txt}")
                        return None
        except Exception as e:
            logger.error(f"Error in send_video: {str(e)}")
            return None
    
    async def send_subscription_expired_goodbye(self, telegram_id: int, stripe_url: str | None = None, paypal_url: str | None = None):
        """
        –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–≤—Ç–æ-–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞).
        –î–∞—ë–º –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: Stripe/PayPal, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –ø–æ–¥–¥–µ—Ä–∂–∫–∞.
        """
        text = (
            "üôè <b>Grazie per essere stata con noi!</b>\n\n"
            "La tua sottoscrizione √® scaduta e l‚Äôaccesso al gruppo √® stato revocato.\n"
            "Puoi tornare quando vuoi ‚Äî usa i pulsanti qui sotto per rinnovare o ricominciare.\n"
        )

        buttons = []
        if stripe_url:
            buttons.append([{"text": "üîÅ Riattiva con Stripe", "url": stripe_url}])
        if paypal_url:
            buttons.append([{"text": "üÖøÔ∏è Riattiva con PayPal", "url": paypal_url}])

        # –±–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        buttons.append([{"text": "üîÑ Ricomincia da capo", "callback_data": "restart_onboarding"}])
        buttons.append([{"text": "üìû Supporto", "url": "https://t.me/liudmylazhyltsova"}])

        reply_markup = {"inline_keyboard": buttons}
        await self.send_message(telegram_id, text, reply_markup)

# ---- periodics ----
async def manage_group_access():
    telegram_service = TelegramService()
    db = None
    try:
        db = SessionLocal()
        expired_subs = db.query(Subscription).filter(
            and_(
                Subscription.expires_at < datetime.utcnow(),
                Subscription.has_group_access == True,
                Subscription.status == "active"
            )
        ).all()

        for sub in expired_subs:
            sub.has_group_access = False
            sub.status = "expired"
            db.add(sub)
            await telegram_service.send_subscription_cancelled_notification(sub.telegram_id)

        db.commit()
        logger.info(f"Processed {len(expired_subs)} expired subscriptions")
    except Exception as e:
        logger.error(f"Error in manage_group_access: {e}")
        if db:
            db.rollback()
    finally:
        if db:
            db.close()

async def manage_group_access_loop(interval_seconds=3600):
    while True:
        await manage_group_access()
        await asyncio.sleep(interval_seconds)

async def send_expiry_warnings():
    telegram_service = TelegramService()
    db = None
    try:
        db = SessionLocal()
        warning_date = datetime.utcnow() + timedelta(days=3)
        subs_to_warn = db.query(Subscription).filter(
            and_(
                Subscription.expires_at <= warning_date,
                Subscription.expires_at > datetime.utcnow(),
                Subscription.status == "active",
                Subscription.has_group_access == True
            )
        ).all()

        for sub in subs_to_warn:
            days_left = max(0, (sub.expires_at - datetime.utcnow()).days)
            await telegram_service.send_subscription_expiry_warning(sub.telegram_id, days_left)

        logger.info(f"Sent expiry warnings to {len(subs_to_warn)} users")
    except Exception as e:
        logger.error(f"Error in send_expiry_warnings: {e}")
    finally:
        if db:
            db.close()

# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –∫—Ä–æ–Ω–∞)
def run_manage_group_access():
    asyncio.run(manage_group_access())

def run_send_expiry_warnings():
    asyncio.run(send_expiry_warnings())
