# telegram_service.py 
import os
import asyncio
import aiohttp
from datetime import datetime, timedelta
from database import SessionLocal, Subscription, get_db # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º get_db
from sqlalchemy import or_
from config import BOT_TOKEN as CONF_BOT_TOKEN
from payment_config import CLOSED_GROUP_LINK
import logging
from functools import wraps # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º wraps –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞

logger = logging.getLogger(__name__ )

APP_URL = os.getenv("APP_URL") or os.getenv("FRONTEND_URL")
if APP_URL and not APP_URL.startswith("https://" ):
    logger.warning("APP_URL/FRONTEND_URL must be HTTPS. Current: %s", APP_URL)

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ webhook.py) ---
def with_db_session(fn):
    @wraps(fn)
    async def wrapper(*args, **kwargs):
        db = next(get_db())
        try:
            # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º await
            result = await fn(db, *args, **kwargs)
            db.commit()
            return result
        except Exception as e:
            db.rollback()
            logger.error(f"DB error in async task {fn.__name__}: {e}", exc_info=True)
            raise
        finally:
            db.close()
    return wrapper

def _platform_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: WebApp –µ—Å–ª–∏ –∑–∞–¥–∞–Ω APP_URL, –∏–Ω–∞—á–µ fallback –≤ –≥—Ä—É–ø–ø—É"""
    # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π: "üì≤ Apri la piattaforma" -> "üì≤ –û—Ç–∫—Ä—ã—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É"
    # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π: "‚û°Ô∏è Accedi al gruppo chiuso Expert Lash" -> "‚û°Ô∏è –í–æ–π—Ç–∏ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É Expert Lash"
    if APP_URL:
        return {"inline_keyboard": [[{"text": "üì≤ –û—Ç–∫—Ä—ã—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É", "web_app": {"url": APP_URL}}]]}
    return {"inline_keyboard": [[{"text": "‚û°Ô∏è –í–æ–π—Ç–∏ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É Expert Lash", "url": CLOSED_GROUP_LINK}]]}

class TelegramService:
    # ... (–º–µ—Ç–æ–¥—ã __init__ –∏ _post –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ–Ω–∏ –Ω–∞–ø–∏—Å–∞–Ω—ã —Ö–æ—Ä–æ—à–æ) ...
    def __init__(self):
        self.bot_token = os.getenv("BOT_TOKEN", CONF_BOT_TOKEN)
        if not self.bot_token:
            raise RuntimeError("BOT_TOKEN not set")
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"

    async def _post(self, method: str, json: dict ):
        try:
            timeout = aiohttp.ClientTimeout(total=15 )
            async with aiohttp.ClientSession(timeout=timeout ) as session:
                async with session.post(f"{self.api_url}/{method}", json=json) as resp:
                    text = await resp.text()
                    if resp.status == 200:
                        try: return await resp.json()
                        except Exception: logger.exception("Telegram JSON decode failed: %s", text[:200]); return None
                    logger.error("Telegram API error [%s]: %s ‚Äî %s", method, resp.status, text[:200])
                    return None
        except Exception as e:
            logger.exception("Telegram API exception [%s]: %s", method, e)
            return None

    async def send_message(self, chat_id: int, text: str, reply_markup=None, parse_mode="HTML"):
        payload = {"chat_id": chat_id, "text": text, "parse_mode": parse_mode}
        if reply_markup: payload["reply_markup"] = reply_markup
        return await self._post("sendMessage", payload)

    async def send_payment_success_notification(self, telegram_id: int, subscription):
        try:
            if not subscription or getattr(subscription, "status", None) != "active":
                logger.warning(f"Skip success notification: subscription not active for telegram_id={telegram_id}")
                # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π: "‚úÖ Pagamento ricevuto. L‚Äôaccesso sar√† attivato dopo la conferma. Attendi per favore."
                # –†—É—Å—Å–∫–∏–π: "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω. –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
                await self.send_message(telegram_id, "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω. –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
                return

            # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π: "üéâ <b>Congratulazioni! Il pagamento √® andato a buon fine!</b>\n\nIl tuo abbonamento √® attivo fino al: ...\nImporto: ...\n\nOra puoi accedere alla piattaforma."
            # –†—É—Å—Å–∫–∏–π: "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!</b>\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: ...\n–°—É–º–º–∞: ...\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É."
            text = (
                "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {subscription.expires_at:%d.%m.%Y %H:%M}\n"
                f"–°—É–º–º–∞: {subscription.amount} {subscription.currency}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É."
            )
            await self.send_message(telegram_id, text, _platform_keyboard())
        except Exception as e:
            logger.error(f"Error sending payment success notification: {e}")

    async def send_subscription_cancelled_notification(self, telegram_id: int):
        try:
            # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π: "‚ùå <b>Il tuo abbonamento √® stato annullato</b>\n\nL‚Äôaccesso alla piattaforma √® stato revocato.\n\nSe desideri riattivare l‚Äôabbonamento, usa il comando /start"
            # –†—É—Å—Å–∫–∏–π: "‚ùå <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n–î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            text = (
                "‚ùå <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
                "–î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.\n\n"
                "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
            await self.send_message(telegram_id, text)
        except Exception as e:
            logger.error(f"Error sending subscription cancelled notification: {e}")

    async def send_subscription_renewed_notification(self, telegram_id: int, subscription):
        try:
            if not subscription or getattr(subscription, "status", None) != "active":
                logger.warning("Skip renewed notification: subscription not active")
                # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π: "‚úÖ Pagamento ricevuto. L‚Äôaccesso sar√† confermato dopo l‚Äôelaborazione."
                # –†—É—Å—Å–∫–∏–π: "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω. –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏."
                await self.send_message(telegram_id, "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω. –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
                return

            # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π: "‚úÖ <b>Abbonamento rinnovato con successo!</b>\n\nIl tuo abbonamento √® stato esteso fino al: ...\nImporto addebitato: ...\n\nL‚Äôaccesso alla piattaforma √® stato mantenuto!"
            # –†—É—Å—Å–∫–∏–π: "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!</b>\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ: ...\n–°–ø–∏—Å–∞–Ω–Ω–∞—è —Å—É–º–º–∞: ...\n\n–î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"
            text = (
                "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!</b>\n\n"
                f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ: {subscription.expires_at:%d.%m.%Y %H:%M}\n"
                f"–°–ø–∏—Å–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {subscription.amount} {subscription.currency}\n\n"
                "–î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"
            )
            await self.send_message(telegram_id, text, _platform_keyboard())
        except Exception as e:
            logger.error(f"Error sending subscription renewed notification: {e}")

    async def send_payment_failed_notification(self, telegram_id: int):
        try:
            # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π: "‚ö†Ô∏è <b>Problema con il pagamento</b>\n\nNon √® stato possibile effettuare l‚Äôaddebito.\nPer favore, controlla i dati della tua carta o aggiorna il metodo di pagamento.\nSe il problema persiste, l‚Äôaccesso ai corsi sar√† sospeso."
            # –†—É—Å—Å–∫–∏–π: "‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–µ—à–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å–∞–º –±—É–¥–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
            text = (
                "‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.\n"
                "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–µ—à–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å–∞–º –±—É–¥–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
            )
            # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π: "üí≥ Aggiorna metodo di pagamento" -> "üí≥ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"
            # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π: "üìû Contatta supporto" -> "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
            reply_markup = {
                "inline_keyboard": [
                    [{"text": "üí≥ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", "callback_data": "update_payment_method"}],
                    [{"text": "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", "url": "https://t.me/liudmylazhyltsova"}]
                ]
            }
            await self.send_message(telegram_id, text, reply_markup )
        except Exception as e:
            logger.error(f"Error sending payment failed notification: {e}")

    # ... (–º–µ—Ç–æ–¥—ã get_chat_member, ban_chat_member, unban_chat_member –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    async def get_chat_member(self, chat_id: str, user_id: int): return await self._post("getChatMember", {"chat_id": chat_id, "user_id": user_id})
    async def ban_chat_member(self, chat_id: str, user_id: int): payload = {"chat_id": chat_id, "user_id": user_id}; res = await self._post("banChatMember", payload); return res if res else await self._post("kickChatMember", payload)
    async def unban_chat_member(self, chat_id: str, user_id: int): return await self._post("unbanChatMember", {"chat_id": chat_id, "user_id": user_id, "only_if_banned": True})

    async def send_subscription_expiry_warning(self, telegram_id: int, days_left: int):
        try:
            # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π: "‚è∞ <b>Il tuo abbonamento scade tra {days_left} giorni.</b>\n\nAssicurati che il pagamento automatico sia attivo per non perdere l‚Äôaccesso."
            # –†—É—Å—Å–∫–∏–π: "‚è∞ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π.</b>\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂ –∞–∫—Ç–∏–≤–µ–Ω, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø."
            text = (
                f"‚è∞ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è(–µ–π).</b>\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂ –∞–∫—Ç–∏–≤–µ–Ω, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø."
            )
            reply_markup = {
                "inline_keyboard": [
                    [{"text": "üí≥ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", "callback_data": "update_payment_method"}],
                    [{"text": "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "url": "https://t.me/liudmylazhyltsova"}]
                ]
            }
            await self.send_message(telegram_id, text, reply_markup )
        except Exception as e:
            logger.error(f"Error sending subscription expiry warning: {e}")

    # ... (–º–µ—Ç–æ–¥ send_video –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    async def send_video(self, chat_id: int, file_id: str, caption: str, reply_markup=None, parse_mode="HTML"):
        # ...
        pass

    async def send_subscription_expired_goodbye(self, telegram_id: int, stripe_url: str | None = None, paypal_url: str | None = None):
        # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π: "üôè <b>Grazie per essere stata con noi!</b>\n\nLa tua sottoscrizione √® scaduta e l‚Äôaccesso √® stato revocato.\nPuoi tornare quando vuoi ‚Äî usa i pulsanti sotto per rinnovare o ricominciare."
        # –†—É—Å—Å–∫–∏–π: "üôè <b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏!</b>\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –∏ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        text = (
            "üôè <b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏!</b>\n\n"
            "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –∏ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
        buttons = []
        # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π: "üîÅ Riattiva con Stripe" -> "üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å —á–µ—Ä–µ–∑ Stripe"
        if stripe_url: buttons.append([{"text": "üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å —á–µ—Ä–µ–∑ Stripe", "url": stripe_url}])
        # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π: "üÖøÔ∏è Riattiva con PayPal" -> "üÖøÔ∏è –ü—Ä–æ–¥–ª–∏—Ç—å —á–µ—Ä–µ–∑ PayPal"
        if paypal_url: buttons.append([{"text": "üÖøÔ∏è –ü—Ä–æ–¥–ª–∏—Ç—å —á–µ—Ä–µ–∑ PayPal", "url": paypal_url}])
        # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π: "üîÑ Ricomincia da capo" -> "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
        buttons.append([{"text": "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "callback_data": "restart_onboarding"}])
        # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π: "üìû Supporto" -> "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
        buttons.append([{"text": "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "url": "https://t.me/liudmylazhyltsova"}] )
        await self.send_message(telegram_id, text, {"inline_keyboard": buttons})

@with_db_session
async def manage_group_access(db): # <-- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–µ—Å—Å–∏—é db
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø."""
    telegram_service = TelegramService()
    expired_subs = db.query(Subscription).filter(
        Subscription.expires_at < datetime.utcnow(),
        Subscription.has_group_access.is_(True),
        Subscription.status == "active"
    ).all()
    
    for sub in expired_subs:
        sub.has_group_access = False
        sub.status = "expired"
        db.add(sub)
        await telegram_service.send_subscription_cancelled_notification(sub.telegram_id)

    if expired_subs:
        logger.info(f"Processed {len(expired_subs)} expired subscriptions")

async def manage_group_access_loop(interval_seconds=3600):
    """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫."""
    while True:
        try:
            await manage_group_access()
        except Exception as e:
            logger.error(f"Error in manage_group_access_loop: {e}", exc_info=True)
        await asyncio.sleep(interval_seconds)

@with_db_session
async def send_expiry_warnings(db): 
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    telegram_service = TelegramService()
    warning_date = datetime.utcnow() + timedelta(days=3)
    subs_to_warn = db.query(Subscription).filter(
        Subscription.expires_at <= warning_date,
        Subscription.expires_at > datetime.utcnow(),
        Subscription.status == "active",
        Subscription.has_group_access.is_(True),
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å
        or_(Subscription.last_warned_at.is_(None), Subscription.last_warned_at < datetime.utcnow() - timedelta(days=1))
    ).all()

    for sub in subs_to_warn:
        days_left = max(0, (sub.expires_at - datetime.utcnow()).days)
        if days_left > 0:
            await telegram_service.send_subscription_expiry_warning(sub.telegram_id, days_left)
            sub.last_warned_at = datetime.utcnow() # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    
    if subs_to_warn:
        logger.info(f"Sent expiry warnings to {len(subs_to_warn)} users")

