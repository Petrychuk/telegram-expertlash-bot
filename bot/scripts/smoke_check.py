
from __future__ import annotations
import os
import sys
import hmac
import hashlib
from datetime import datetime, timedelta

# --- .env ---
try:
    from dotenv import load_dotenv
    load_dotenv(os.path.join(os.path.dirname(__file__), "..", ".env"))
except Exception:
    pass

ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if ROOT not in sys.path:
    sys.path.insert(0, ROOT)

def test_env():
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ENV‚Ä¶")
    ok = True
    need = ["BOT_TOKEN", "JWT_SECRET"]
    optional = ["APP_URL", "GROUP_ID", "STRIPE_SECRET_KEY", "PAYPAL_CLIENT_ID", "PAYPAL_CLIENT_SECRET"]

    for k in need:
        v = os.getenv(k)
        if v:
            print(f"  ‚úÖ {k} ‚Äî OK")
        else:
            print(f"  ‚ùå {k} ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            ok = False

    for k in optional:
        v = os.getenv(k)
        if v:
            head = (v[:48] + "...") if len(v) > 48 else v
            print(f"  ‚ÑπÔ∏è  {k}: {head}")
        else:
            print(f"  ‚ÑπÔ∏è  {k}: (–Ω–µ –∑–∞–¥–∞–Ω–æ)")

    return ok

def test_file_structure():
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤‚Ä¶")
    required = [
        "config.py",
        "payment_config.py",
        "database.py",
        "payment_service.py",
        "telegram_service.py",
        "webhook.py",
        "main.py",
        "auth_telegram.py",
        "set_group_menu.py",
        "server.py",
        "tasks.py"
    ]
    ok = True
    for f in required:
        p = os.path.join(ROOT, f)
        if os.path.exists(p):
            print(f"  ‚úÖ {f} –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"  ‚ùå {f} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            ok = False
    return ok

def test_database():
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î‚Ä¶")
    try:
        from database import create_tables, get_db, create_user, get_user_by_telegram_id

        create_tables()
        print("  ‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–∞–∫—Ç—É–∞–ª—å–Ω—ã")

        db = next(get_db())
        try:
            tid = 123456789
            user = get_user_by_telegram_id(db, tid)
            if not user:
                user = create_user(db, tid, "testuser", "Test", "User")
                print(f"  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: id={user.id}")
            else:
                print(f"  ‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: id={user.id}")

            check = get_user_by_telegram_id(db, tid)
            if not check:
                print("  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è")
                return False
        finally:
            db.close()
        print("  ‚úÖ –ë–î OK")
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False

def test_payment_config():
    print("\nüîç –ö–æ–Ω—Ñ–∏–≥ –ø–ª–∞—Ç–µ–∂–µ–π‚Ä¶")
    try:
        from payment_config import (
            PAYPAL_CLIENT_ID, PAYPAL_CLIENT_SECRET, STRIPE_SECRET_KEY,
            SUBSCRIPTION_PRICE, CLOSED_GROUP_LINK
        )
        print(f"  ‚úÖ Subscription Price: {SUBSCRIPTION_PRICE} EUR")
        print(f"  ‚úÖ Closed Group Link: {CLOSED_GROUP_LINK}")
        # –∫–ª—é—á–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ –Ω–∞ –¥–µ–≤–µ ‚Äî –Ω–µ –≤–∞–ª–∏–º —Ç–µ—Å—Ç
        for name, val in [("PAYPAL_CLIENT_ID", PAYPAL_CLIENT_ID),
                          ("PAYPAL_CLIENT_SECRET", PAYPAL_CLIENT_SECRET),
                          ("STRIPE_SECRET_KEY", STRIPE_SECRET_KEY)]:
            head = (val or "")
            head = (head[:10] + "...") if head else "(empty)"
            print(f"  ‚ÑπÔ∏è  {name}: {head}")
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        return False

def test_payment_services():
    print("\nüîç –°–µ—Ä–≤–∏—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π (–æ—à–∏–±–∫–∏ —Å–µ—Ç–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã)‚Ä¶")
    try:
        from payment_service import StripeService, PayPalService
        print("  ‚úÖ –ò–º–ø–æ—Ä—Ç StripeService/PayPalService")
        # Stripe
        try:
            res = StripeService.create_subscription_session(123456789)
            ok = res.get("success")
            print("  ‚úÖ Stripe OK" if ok else f"  ‚ö†Ô∏è  Stripe: {res.get('error')}")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  Stripe –≤—ã–∑–æ–≤ —É–ø–∞–ª: {e}")
        # PayPal
        try:
            res = PayPalService.create_subscription(123456789)
            ok = res.get("success")
            print("  ‚úÖ PayPal OK" if ok else f"  ‚ö†Ô∏è  PayPal: {res.get('error')}")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  PayPal –≤—ã–∑–æ–≤ —É–ø–∞–ª: {e}")
        return True
    except Exception as e:
        print(f"  ‚ùå –ò–º–ø–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        return False

def test_auth_module():
    print("\nüîç –ú–æ–¥—É–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram (–ø–æ–¥–ø–∏—Å—å)‚Ä¶")
    try:
        import auth_telegram as at

        # —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π init_data —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é
        # –æ–±—Ä–∞–∑—É–µ–º data –±–µ–∑ hash ‚Üí –∑–∞—Ç–µ–º –≤—ã—á–∏—Å–ª–∏–º hash –∫–∞–∫ –¥–µ–ª–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
        fake_token = "123:ABC-example-bot-token"
        fields = {
            "auth_date": "1700000000",
            "query_id": "AAHhHhHhHhHh",
            "user": json_dumps_sorted({"id": 42, "username": "demo", "first_name": "Demo"}),
        }
        check_str = "\n".join(f"{k}={fields[k]}" for k in sorted(fields.keys()))
        secret = hashlib.sha256(fake_token.encode("utf-8")).digest()
        calc_hash = hmac.new(secret, check_str.encode("utf-8"), hashlib.sha256).hexdigest()
        init_data = "&".join([f"{k}={fields[k]}" for k in fields.keys()] + [f"hash={calc_hash}"])

        ok = at.check_telegram_auth(init_data, fake_token)
        if not ok:
            print("  ‚ùå check_telegram_auth –≤–µ—Ä–Ω—É–ª None –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏")
            return False
        print("  ‚úÖ check_telegram_auth –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å—å")
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ auth-–º–æ–¥—É–ª—è: {e}")
        return False

def json_dumps_sorted(obj) -> str:
    import json
    return json.dumps(obj, ensure_ascii=False, separators=(",", ":"), sort_keys=True)

def test_blueprints_and_routes():
    print("\nüîç Flask blueprints / –º–∞—Ä—à—Ä—É—Ç—ã‚Ä¶")
    try:
        from webhook import app   # —Ç–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π Flask
        routes = {rule.rule for rule in app.url_map.iter_rules()}
        expected = {"/webhook/stripe", "/webhook/paypal", "/health", "/api/auth/telegram", "/api/auth/test"}
        missing = expected - routes
        if missing:
            print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç—ã: {sorted(missing)}")
            # –Ω–µ –≤–∞–ª–∏–º –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ
            return False
        print("  ‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Flask app/webhook: {e}")
        return False

def test_telegram_service_stub():
    print("\nüîç TelegramService (–±–µ–∑ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)‚Ä¶")
    try:
        from telegram_service import TelegramService
        svc = TelegramService()
        print(f"  ‚úÖ TelegramService.api_url={svc.api_url[:48]}‚Ä¶")
        print("  ‚ö†Ô∏è  –°–µ—Ç–µ–≤—ã–µ –≤—ã–∑–æ–≤—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤ smoke")
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ TelegramService: {e}")
        return False

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ SMOKE-–ø—Ä–æ–≤–µ—Ä–∫–∏\n")
    tests = [
        ("ENV", test_env),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", test_file_structure),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database),
        ("–ö–æ–Ω—Ñ–∏–≥ –ø–ª–∞—Ç–µ–∂–µ–π", test_payment_config),
        ("–°–µ—Ä–≤–∏—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π", test_payment_services),
        ("Auth Telegram –ø–æ–¥–ø–∏—Å—å", test_auth_module),
        ("Flask –º–∞—Ä—à—Ä—É—Ç—ã", test_blueprints_and_routes),
        ("TelegramService", test_telegram_service_stub),
    ]

    passed = 0
    for name, fn in tests:
        print("\n" + "=" * 60)
        print(f"–¢–µ—Å—Ç: {name}")
        print("=" * 60)
        try:
            if fn():
                passed += 1
                print(f"‚úÖ {name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {name}: –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"‚ùå {name}: –û–®–ò–ë–ö–ê ‚Äî {e}")

    total = len(tests)
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–ò")
    print("=" * 60)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}  ({passed/total*100:.1f}%)")
    print("üéâ –í—Å—ë –æ–∫!" if passed == total else "‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤—ã—à–µ.")
    return 0 if passed == total else 1

if __name__ == "__main__":
    sys.exit(main())
