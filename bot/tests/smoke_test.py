# tests/smoke_test.py 

import os
import sys
import requests
# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ ---
ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if ROOT_DIR not in sys.path:
    sys.path.insert(0, ROOT_DIR)

try:
    from dotenv import load_dotenv
    load_dotenv(os.path.join(ROOT_DIR, ".env"))
except ImportError:
    print("‚ö†Ô∏è  dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

def check_env_vars():
    print("\n--- 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---")
    required = ["BOT_TOKEN", "JWT_SECRET", "DB_USER", "DB_PASSWORD", "DB_HOST", "DB_PORT", "DB_NAME"]
    all_ok = True
    for var in required:
        if os.getenv(var):
            print(f"‚úÖ {var} - OK")
        else:
            print(f"‚ùå {var} - –ù–ï –ù–ê–ô–î–ï–ù–û!")
            all_ok = False
    return all_ok

def check_file_structure():
    print("\n--- 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ ---")
    required = ["main.py", "webhook.py", "database.py", "auth_telegram.py", "payment_service.py", "telegram_service.py"]
    all_ok = True
    for f in required:
        path = os.path.join(ROOT_DIR, f)
        if os.path.exists(path):
            print(f"‚úÖ {f} - OK")
        else:
            print(f"‚ùå {f} - –ù–ï –ù–ê–ô–î–ï–ù!")
            all_ok = False
    return all_ok

def check_database_connection():
    print("\n--- 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î ---")
    try:
        from database import get_db
        db = next(get_db())
        db.execute("SELECT 1")
        db.close()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î - OK")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False

def check_api_health():
    print("\n--- 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API (health check) ---")
    url = "http://127.0.0.1:8080/health"
    try:
        r = requests.get(url, timeout=5 )
        if r.status_code == 200:
            print(f"‚úÖ {url} - OK (—Å—Ç–∞—Ç—É—Å 200)")
            return True
        else:
            print(f"‚ùå {url} - –û—à–∏–±–∫–∞ (—Å—Ç–∞—Ç—É—Å {r.status_code})")
            return False
    except requests.RequestException as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {url}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω.")
        return False

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ SMOKE-—Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã...")
    results = {
        "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è": check_env_vars(),
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤": check_file_structure(),
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î": check_database_connection(),
        "Health Check API": check_api_health(),
    }
    
    print("\n" + "="*30)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("="*30)
    
    all_passed = all(results.values())
    for name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{status} - {name}")
        
    if all_passed:
        print("\nüéâ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")

if __name__ == "__main__":
    main()
